import math
import time
import random
import sklearn.preprocessing
import sys
from milvus import *

m = Milvus()
m.connect(host="192.168.1.10", port=19530)
nq = 100000
dimension = 128
top_k = 20

# for metric_type in [MetricType.L2, MetricType.IP]:
#         table_name = "test_10m%s" % int(metric_type)
#         time.sleep(2)
#         m.create_table({
#                 "table_name": table_name,
#                 "dimension": dimension,
#                 "index_file_size": 1024,
#                 "metric_type": metric_type
#         })

# for i in range(100):
#         vector_tmp = [[random.random() for i in range(dimension)] for i in range(nq)]
#         vectors = sklearn.preprocessing.normalize(vector_tmp, axis=1, norm="l2").tolist()
#         for metric_type in [MetricType.L2, MetricType.IP]:
#                 table_name = "test_10m%s" % int(metric_type)
#                 m.add_vectors(table_name, vectors, ids=[i for i in range(i*nq,(i+1)*nq)])

# print(vectors[0])
# print(vectors[1])
# sys.exit()

q_vectors_0=[0.10672786554592419, 0.02800366457480474, 0.04722243159141973, 0.005300670900478675, 0.11985968925199586, 0.08289160856159195, 0.12992458554564373, 0.1387260937580853, 0.06165599809302453, 0.12833469617132062, 0.011836489045714646, 0.10743085802655004, 0.13790763348350732, 0.08392510735743734, 0.009710075876672997, 0.13252014768955792, 0.02930298415799917, 0.09670692585637418, 0.05169417181594408, 0.048689990612027875, 0.062148143555269354, 0.15596615082202286, 0.08660639519683375, 0.07870391026369976, 0.028042795829218172, 0.044870571432114176, 0.12740371453929097, 0.14829082233073748, 0.0517715560871347, 0.1155169390956077, 0.12815001991702213, 0.0765166333130611, 0.0659118033931671, 0.1288393677711371, 0.07347592819770676, 0.11236215768034001, 0.11794841416637876, 0.12700157507343943, 0.06121656920970285, 0.06416728661373607, 0.08359382974289108, 0.15535779633889188, 0.05110728520402052, 0.12292348016387852, 0.12162816191555621, 0.08846047246552034, 0.10343897052426468, 0.156180653523219, 0.14109780302111677, 0.12099587709563685, 0.043906200743693564, 0.010455128073628958, 0.02167784669886232, 0.05631221577030811, 0.03065941303455983, 0.10921876333146743, 0.024770690565599485, 0.012917229632683883, 0.111371284053562, 0.043201297232587574, 0.04177624713829481, 0.12264840220110147, 0.037386283448546526, 0.05298048393870931, 0.12684140518110038, 0.09169862663664598, 0.1440765456824052, 0.10689317342217748, 0.095878911254586, 0.08887626543475499, 0.06492709125448422, 0.036513889453561786, 0.11666786294806411, 0.023771550531579637, 0.0578334393071799, 0.1482977195647506, 0.14734845076208047, 0.08018354394935223, 0.14203918087721132, 0.002643611038343776, 0.008071320001903852, 0.047426290106789906, 0.031151118189078033, 0.10159079706685906, 0.017513782194058428, 0.021404747481620745, 0.01896175742683512, 0.08014265794552525, 0.02888871092974136, 0.06451381871096533, 0.14467795742370743, 0.01706984319257194, 0.03590972189079534, 0.14170477406331297, 0.06334336084383356, 0.09420303174161491, 0.01869799189251656, 0.12616340560927033, 0.08288368894385824, 0.022691426151784704, 0.03128726683514244, 0.020580254933566793, 0.011597096691036483, 0.09932352126129539, 0.05371973439253795, 0.0990915126129334, 0.07823718709721343, 0.05746319225506403, 0.04589671806219751, 0.1326835314749066, 0.12821743831857463, 0.13084597523136351, 0.05267122768472883, 0.02557073344316199, 0.004513324739275835, 0.012530168454973853, 0.04264930642359826, 0.010680503890132566, 0.13304996316132767, 0.12092234465185396, 0.03165767239109528, 0.02863977093312831, 0.08372819086181944, 0.0999857813226458, 0.05259245961843069, 0.0019340892830662572, 0.1549244049477143, 0.028273763245951038]

q_vectors_1=[0.043751107426928275, 0.0168600155902178, 0.03557866524583996, 0.05631549199417244, 0.07239323314281378, 0.026473567811719164, 0.009404175309698334, 0.11956811261092076, 0.07760863040133871, 0.08425092059204899, 0.03167453649320204, 0.12483204106770178, 0.14683011011760103, 0.10527334322752738, 0.019960502097223776, 0.15171465611342164, 0.12428424866850551, 0.057915325007182564, 0.10900496247490868, 0.04219524742940422, 0.014485952253419318, 0.03603932549962005, 0.06279559476416063, 0.14620170302940388, 0.1014457953661293, 0.1459404495834523, 0.11024657648294257, 0.043624373743369346, 0.03978654031376622, 0.14113526864618348, 0.15011850976952681, 0.0391331314509725, 0.11045348249972044, 0.0736926825909683, 0.04554364746150414, 0.03273849054108393, 0.02989236086413372, 0.05160082384174836, 0.018841694327225836, 0.09284826680486744, 0.06942187305464044, 0.15190201922016025, 0.10942334324930729, 0.1277514384763841, 0.04626479646196511, 0.10718035854319867, 0.08332293750006313, 0.07279383328582459, 0.09850389867099074, 0.09074002186083141, 0.023883896116951644, 0.02054983224308226, 0.08989183016934638, 0.13941148197839076, 0.07671322140083257, 0.1367784539322519, 0.06439561884022985, 0.047539730928318764, 0.10606871367000602, 0.05541671750300275, 0.13758040238065214, 0.040142201429416165, 0.12043622704423389, 0.018800786354681333, 0.093833436428684, 0.06514224390645802, 0.04333367694285726, 0.08982208299414592, 0.0541542220479363, 0.03544846480275654, 0.06342236027751619, 0.04437709963506851, 0.13378423812747958, 0.04475561126865508, 0.07028485967909393, 0.10931297884869491, 0.11523376155927624, 0.0006882047818277617, 0.016448991174083348, 0.12666050414280228, 0.12349808357882991, 0.12894031380177828, 0.1463279858695273, 0.07731723205877243, 0.043927602233363686, 0.01744853122861332, 0.13734848114858864, 0.04952185452153965, 0.06439044721659662, 0.019766434089333488, 0.14963559525865766, 0.13933443499182682, 0.031205887538241283, 0.05306051792322029, 0.10904032839417652, 0.13704477343361895, 0.06535030166028573, 0.13605337393474687, 0.1517150322118986, 0.030112045743974233, 0.09026503385331149, 0.11040069525366453, 0.06620342841651719, 0.08580422601097483, 0.05174241381112987, 0.005228943672635232, 0.13350529976610623, 0.029456780156245282, 0.1302973431014222, 0.11613269050019381, 0.14830862705886846, 0.060349156138722, 0.0811589511566379, 0.011404771918828958, 0.04957336672110614, 0.0676770415572766, 0.04766126211898344, 0.09666739933933682, 0.05393116613350818, 0.08585500421355959, 0.07493413679668584, 0.05378977155085281, 0.03245166709138201, 0.07259712408576979, 0.00042860057684213857, 0.09028918249152491, 0.11610850709867514, 0.05153717777560393]

top_k_ids_l2 = []
top_k_ids_ip = []

for metric_type in [MetricType.L2, MetricType.IP]:
        table_name = "test_10m%s" % int(metric_type)
        m.create_index(table_name, {'index_type': IndexType.FLAT,'nlist': 16384})

for metric_type in [MetricType.L2, MetricType.IP]:
        table_name = "test_10m%s" % int(metric_type)
        print(m.describe_table(table_name))
        print(m.describe_index(table_name))
        status, results = m.search_vectors(table_name, top_k, 64, [q_vectors_0])
        print(results)
        for item in results:
                for tmp in item:
                        if metric_type == MetricType.L2:
                                top_k_ids_l2.append(tmp.id)
                        else:
                                top_k_ids_ip.append(tmp.id)
   
                                    
print(top_k_ids_l2)
print(top_k_ids_ip)

result = set(top_k_ids_ip).intersection(set(top_k_ids_l2))
print(float(len(result)))