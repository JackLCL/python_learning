import math
import time
import random
import sklearn.preprocessing
import sys
from milvus import *

m = Milvus()
m.connect(host="192.168.1.10", port=19530)
nq = 100000
dimension = 128
top_k = 20

# for metric_type in [MetricType.L2, MetricType.IP]:
#         table_name = "test_1m%s" % int(metric_type)
#         time.sleep(2)
#         m.create_table({
#                 "table_name": table_name,
#                 "dimension": dimension,
#                 "index_file_size": 1024,
#                 "metric_type": metric_type
#         })

# for i in range(2):
#         vector_tmp = [[random.random() for i in range(dimension)] for i in range(nq)]
#         vectors = sklearn.preprocessing.normalize(vector_tmp, axis=1, norm="l2").tolist()
#         for metric_type in [MetricType.L2, MetricType.IP]:
#                 table_name = "test_1m%s" % int(metric_type)
#                 m.add_vectors(table_name, vectors, ids=[i for i in range(i*nq,(i+1)*nq)])

# print(vectors[0])
# print(vectors[1])

# sys.exit()

q_vectors_0=[0.033468561763250984, 0.11325489756264065, 0.045845172259416006, 0.0877134473851495, 0.06316007763602281, 0.10330210158021526, 0.09090309821844839, 0.025397742599892387, 0.05456728344126092, 0.08647701131213777, 0.07932311822373114, 0.1260241992654955, 0.1205014880910006, 0.09402773970833864, 0.08691732689554854, 0.10762527091340084, 0.1481089435030998, 0.030424643485233924, 0.08791250781869438, 0.020712730146402653, 0.08034684448570233, 0.06033173147824112, 0.11991782301705771, 0.15872195349004276, 0.07987399209196712, 0.024016255731237862, 0.10334196508678144, 0.029511994733700177, 0.14755983457870708, 0.026572202980887583, 0.02398007283940886, 0.04351886893239376, 0.1003919069102544, 0.13859516651060588, 0.14175400688892986, 0.07038564375415399, 0.15536350027886467, 0.15594228706548666, 0.10275251775065117, 0.04639533588135491, 0.06824054835721267, 0.12060498830687717, 0.06307084795968763, 0.0711457127802757, 0.016038571157321095, 0.017672603194749413, 0.03361379638819478, 0.09991740493709804, 0.000493762804687023, 0.09806196831420527, 0.050602538016594194, 0.11722337094238558, 0.09883125872668505, 0.13349066003915958, 0.11064510565148622, 0.07703500791755521, 0.10094929896472596, 0.05639467959517585, 0.06140370508647767, 0.10767501801377767, 0.1148370298212057, 0.10730854850151753, 0.15253652234175766, 0.07934441337033722, 0.002595752691788695, 0.09891894648998693, 0.14155742995400133, 0.038740079587662485, 0.1125800868365087, 0.05410117047318968, 0.010076262003996405, 0.08540269132519245, 0.09880436104395456, 0.03766689206283704, 0.03538582981968096, 0.09085541061439185, 0.14702715731146895, 0.026977401709540015, 0.1413266888150735, 0.08965034396696724, 0.03839692613923378, 0.10277793838272291, 0.12118764929314213, 0.13271131850147125, 0.043264475341096426, 0.06049499106308955, 0.08776831391772388, 0.000260519020490852, 0.13693792188473936, 0.13554888142759067, 0.07990270032754028, 0.03210684677020121, 0.10074870729465532, 0.1334175693659864, 0.0532647296298947, 0.0675917785466446, 0.11758063889661352, 0.13999130453441608, 0.006688043598097107, 0.11350435873998004, 0.019358070472768493, 0.04785793703073391, 0.09994093556513531, 0.09233219726023052, 0.10888950527682661, 0.020495094412807318, 0.07516241222064463, 0.049366273320714776, 0.12915934222776104, 0.05893091694802087, 0.0028394564223017927, 0.10962664969522055, 0.09488404094853575, 0.03620064120109623, 0.0047660617889297395, 0.0004885365509015055, 0.10559732305835713, 0.06988779951401772, 0.09566614120284224, 0.017047788920328898, 0.007045839148680808, 0.02741229424594239, 0.030710299675922165, 0.06193205544279041, 0.10778612722615065, 0.051463328444558025, 0.0017146953566317034, 0.06876728130029716]

q_vectors_1=[0.05709115187814359, 0.09099096453276914, 0.04117068541664076, 0.10262285039448112, 0.15080791129705237, 0.007604945173496804, 0.039610168286837666, 0.01781295601871665, 0.1313413042370028, 0.02088327312111756, 0.04892731386732977, 0.02065104328140778, 0.0912616327300917, 0.09824535720292243, 0.03104770571056597, 0.08450990233041437, 0.13901973569921847, 0.11203426965680247, 0.08587541396316796, 0.12579238984583704, 0.1119331131220063, 0.048211054261211826, 0.09502873833981845, 0.10581580528548576, 0.0847447852440986, 0.1488645873053436, 0.09324387679175898, 0.0995687077921865, 0.037093253395918346, 0.1115656260437268, 0.018190706546557883, 0.12626011885846483, 0.06915779075244431, 0.038692433142507254, 0.07673413314063895, 0.022439432385937815, 0.11809408227683484, 0.13719239767032515, 0.09090951983322122, 0.02307531226351656, 0.07963735790952794, 0.04711120048772827, 0.11191612925566287, 0.13672142695139555, 0.14265861410811867, 0.142365136291158, 0.14760088162424725, 0.05724103529062019, 0.013022956872570476, 0.0634958790735077, 0.10910687339618622, 0.030756180048717392, 0.05858200997261367, 0.07881730562725588, 0.015991127127923888, 0.02528486471886287, 0.13879713276470945, 0.006830484006384452, 0.030566264103081917, 0.04578048158569719, 0.05364805553057127, 0.04973094854410769, 0.05986474218686308, 0.14355692515632182, 0.021468341480719997, 0.07931193904458468, 0.018191078622792716, 0.05603573355070513, 0.006121292651871483, 0.03605916187235904, 0.12205688097710361, 0.13227000031186933, 0.05361803455871828, 0.06997622903459134, 0.03535933707864304, 0.0004401682524768849, 0.09897324334906722, 0.019998199150495607, 0.0817551025907716, 0.02524569997507794, 0.12968991095222523, 0.12083512028484417, 0.035451668191654746, 0.07053514075184679, 0.1118713160073254, 0.06708305650938276, 0.11769843889955162, 0.03912886219433227, 0.004008368230226698, 0.07396522705651631, 0.0900739091499048, 0.13799264842331457, 0.04880213266643629, 0.012007248565899409, 0.11747940464011028, 0.12070499140056806, 0.03373627287302465, 0.10584889683912752, 0.012805052895587702, 0.05583823425603637, 0.08631442172297872, 0.09667387535954627, 0.1191646323210759, 0.13785793088048015, 0.04185595430543879, 0.14623937976209073, 0.023998706533522693, 0.08946376543869539, 0.05678917222488587, 0.06018415030291032, 0.07880349515315364, 0.05928075718967627, 0.14739050284385352, 0.0723688411319585, 0.14785479286839529, 0.07466642585517536, 0.04060827892188121, 0.12395499466698885, 0.019765825411030925, 0.14036884183105297, 0.1505372486427257, 0.12004804884676114, 0.09620779081067862, 0.047824140378410006, 0.08786307360838003, 0.12933102075908207, 0.10612716890430059, 0.06122966700308387]


top_k_ids_l2 = []
top_k_ids_ip = []

# for metric_type in [MetricType.L2, MetricType.IP]:
#         table_name = "test_1m%s" % int(metric_type)
#         m.create_index(table_name, {'index_type': IndexType.IVFLAT,'nlist': 16384})

# sys.exit()
for metric_type in [MetricType.L2, MetricType.IP]:
        table_name = "test_1m%s" % int(metric_type)
        print(m.describe_table(table_name))
        print(m.describe_index(table_name))
        status, results = m.search_vectors(table_name, top_k, 64, [q_vectors_1])
        print(results)
        for item in results:
                for tmp in item:
                        if metric_type == MetricType.L2:
                                top_k_ids_l2.append(tmp.id)
                        else:
                                top_k_ids_ip.append(tmp.id)
   
                                    
print(top_k_ids_l2)
print(top_k_ids_ip)

result = set(top_k_ids_ip).intersection(set(top_k_ids_l2))
print(float(len(result)))