import math
import time
import random
import sklearn.preprocessing
import sys
from milvus import *

m = Milvus()
m.connect(host="192.168.1.10", port=19530)
nq = 100000
dimension = 128
top_k = 20

# for metric_type in [MetricType.L2, MetricType.IP]:
#         table_name = "test_%s" % int(metric_type)
#         time.sleep(2)
#         m.create_table({
#                 "table_name": table_name,
#                 "dimension": dimension,
#                 "index_file_size": 1024,
#                 "metric_type": metric_type
#         })

# for i in range(100):
#         vector_tmp = [[random.random() for i in range(dimension)] for i in range(nq)]
#         vectors = sklearn.preprocessing.normalize(vector_tmp, axis=1, norm="l2").tolist()
#         for metric_type in [MetricType.L2, MetricType.IP]:
#                 table_name = "test_%s" % int(metric_type)
#                 m.add_vectors(table_name, vectors, ids=[i for i in range(i*nq,(i+1)*nq)])

# print(vectors[0])
# print(vectors[1])
# sys.exit()

q_vectors_1=[0.06050046653020538, 0.035592977236067615, 0.14073150644947138, 0.14256465141032085, 0.013543348606898039, 0.07139400743467318, 0.056291036142555, 0.1466210688270879, 0.056949839253804174, 0.1496920238705394, 0.1275588012803115, 0.15002741091887598, 0.09347279080319874, 0.03377494305015854, 0.0504449546897915, 0.10528612627044917, 0.018164594150106284, 0.020731314663049706, 0.1184645780705423, 0.04294724671342013, 0.03997425813364478, 0.0346050569218228, 0.014461766782962846, 0.04062248646511234, 0.09529059275262229, 0.10544019967390017, 0.14002471607704534, 0.1467687759922167, 0.09356831585195309, 0.09476047301955769, 0.012221068385947739, 0.11037935626286133, 0.016982624288745952, 0.009074869073214576, 0.09284613124045579, 0.0018930268587004117, 0.09996924273285465, 0.11960627956086019, 0.048402931734521176, 0.045870285546944396, 0.004682654369989921, 0.07705182195466907, 0.0563810324944925, 0.08433441976602776, 0.012134582252155628, 0.0177702194920641, 0.03164434301096738, 0.09799899436554245, 0.06951469840217941, 0.15263187924186578, 0.05341463566895605, 0.04643084083580038, 0.0686260033610897, 0.06749422286223067, 0.1264341997007932, 0.12257338156752552, 0.1053075083833899, 0.01055822492597211, 0.1042779316313408, 0.010767442043450285, 0.13720016375037594, 0.0026697557737163317, 0.13967683858187915, 0.04022831466951632, 0.09798618161815081, 0.010414791478515789, 0.11815802349734236, 0.04715429559006481, 0.11350574131001165, 0.11820330381428332, 0.10905514212244041, 0.014711951850562231, 0.064064785344529, 0.0009911512438886823, 0.12728467159801207, 0.03187958933159192, 0.019280598800703912, 0.1199295231136589, 0.14473947214705957, 0.11395934781528119, 0.030508782612760015, 0.059136374278641504, 0.047413388903991965, 0.09601933456158633, 0.001962939365727901, 0.02514723453555163, 0.10519173849926161, 0.10697646211295714, 0.017220032978844373, 0.13170082334715125, 0.07206065286499622, 0.12477516634886884, 0.031889501496087, 0.09709213967999823, 0.09245957874534703, 0.14088536205173205, 0.0730520157402972, 0.13825570085462957, 0.02126896638122823, 0.14796643186488947, 0.09677633310249119, 0.06614985755397601, 0.04662427329482292, 0.06706832015916732, 0.1299706677140508, 0.09863514699379908, 0.0927054049479795, 0.13003942312668867, 0.012118649445080036, 0.10340841664327362, 0.12080125502493493, 0.11118459402962208, 0.06526935156211572, 0.01519099848013014, 0.0877911152939281, 0.0797997617475216, 0.03781095618065175, 0.0024648878493654194, 0.137239836410645, 0.14554492982473238, 0.021853975413588456, 0.03303381618154481, 0.1337784336819261, 0.04932333580122836, 0.07807838296321826, 0.069205883914129, 0.15018197505128425, 0.008913423568326185]


top_k_ids_l2 = []
top_k_ids_ip = []

# for metric_type in [MetricType.L2, MetricType.IP]:
#         table_name = "test_%s" % int(metric_type)
#         m.create_index(table_name, {'index_type': IndexType.IVFLAT,'nlist': 16384})

for metric_type in [MetricType.L2, MetricType.IP]:
        table_name = "test_%s" % int(metric_type)
        print(m.describe_table(table_name))
        print(m.describe_index(table_name))
        status, results = m.search_vectors(table_name, top_k, 64, [q_vectors_1])
        print(results)
        for item in results:
                for tmp in item:
                        if metric_type == MetricType.L2:
                                top_k_ids_l2.append(tmp.id)
                        else:
                                top_k_ids_ip.append(tmp.id)
   
                                    
print(top_k_ids_l2)
print(top_k_ids_ip)

result = set(top_k_ids_ip).intersection(set(top_k_ids_l2))
print(float(len(result)))